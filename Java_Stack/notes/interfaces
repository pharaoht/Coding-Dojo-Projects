There are 3 types of interface methods: default, static and abstract.

New in Java 8, default methods allow developers to create default methods that do not need implementation.
Static methods are interface member methods. Also new to Java 8, they are implemented on the interface level and are called on the interface, not the class. Therefore, you cannot override static interface methods. You can only call them directly on the interface that they were declared.
Abstract methods are methods that are declared without implementation. We saw an example of that in the OperateBicycle example above.
Default methods are declared with default, and static methods with the static keyword; abstract methods are implicit, and you do not include a method type. Below are all implicit declarations:

Abstract is the implicit method type; without declaration of either Static or default the method will be Abstract
public is the implicit access modifier.
An interface can contain constant declarations as well (i.e. static final class variables). All constant values defined in an interface are implicitly public, static, and final. Therefore, you are free to omit these modifiers.

OperateBicycle.java
public interface OperateBicycle {
    // constant that is public, static, and final
    double myConstant = 3.0;
    
    // default method that does not need implementation
    default void sayHello() {
        System.out.println("Hello everybody");
    }
    
    // static method that does not need implementation
    static void staticMethod() {
        System.out.println("Hello from the static method of the interface");
    }
    void speedUp(int increment);
    void applyBrakes(int decrement);
}
Implementing an Interface
To implement any interface, we must use the keyword implements in our class definitions. However, there is one rule. A class that implements an interface must implement all methods that were defined in the interface definition besides default and static.

Bicycle.java
class Bicycle implements OperateBicycle {        
    private int speed;
    public Bicycle() {
        speed = 0;
    }
    // a static method that calls on the interface static method
    public static void staticMethod() {
        OperateBicycle.staticMethod();
    }
    // implementing speedUp
    public void speedUp(int increment) {
        speed += increment;
    }
    // implementing applyBrakes
    public void applyBrakes(int decrement) {
        speed -= decrement;
    }
    public int getSpeed() {
        return speed;
    }
}
BicycleTest.java
class BicycleTest {
    public static void main(String[] args) {
        Bicycle b = new Bicycle();
        // print constant
        System.out.println(Bicycle.myConstant);
        b.sayHello();
        Bicycle.staticMethod();
        b.speedUp(3);
        b.applyBrakes(2);
        System.out.println(b.getSpeed());
    }
}
Output:

3.0
Hello everybody
Hello from the static method of the interface
1
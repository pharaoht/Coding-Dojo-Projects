You tell the compiler that your Human class will be an extension of the Mammal class, and will, therefore, get everything that you wrote on the Mammal class for free. You would write something like this:

public class Human extends Mammal{
    
}
copy
In this case, Human would be a subclass of Mammal, and Mammal would be the superclass of Human. The extends keyword tell our compiler of the relationship, and now the Human class has inherited all the members from its superclass (except it won't have access to private member variables, unless they were exposed through getters and setters).

Let's see this in action!

Mammal.java
class Mammal{
    private boolean sleeping = false;
    public void regulateTemperature() {
        System.out.println("My temperature is just right now.");
    }
    public void startSleeping() {
        sleeping = true;
        System.out.println("ZzZz");
    }
    public boolean isSleeping(){
        return sleeping;
    }
}
Human.java
class Human extends Mammal {
    
    public void goToWork(){
        System.out.println("I'm going to work, something only humans can do.");
    }
}
HumanTest.java
class HumanTest {
    public static void main(String[] args) {
        Human h = new Human();
        h.regulateTemperature();
        h.startSleeping();
        h.goToWork();
        boolean sleeping = h.isSleeping();
        
        if (sleeping){
            System.out.println("The human is sleeping!");
        }
    }
}
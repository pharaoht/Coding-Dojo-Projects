Commands:
python manage,py shell
from app_name.models import *
python manage.py makemigrations
python manage.py migrate



Creating a new record
ClassName.objects.create(field1="value for field1", field2="value for field2", etc.)

Reading existing records
Methods that return a single instance of a class
ClassName.objects.first() - gets the first record in the table
ClassName.objects.last() - gets the last record in the table
ClassName.objects.get(id=1) - gets the record in the table with the specified id
this method will throw an error unless only and exactly one record matches the query

Methods that return a list of instances of a class
ClassName.objects.all() - gets all the records in the table

ClassName.objects.filter(field1="value for field1", etc.) - gets any records matching the query provided

ClassName.objects.exclude(field1="value for field1", etc.) - gets any records not matching the query provided


Updating an existing record
c = ClassName.objects.get(id=1)
c.field_name = "some new value for field_name"
c.save()


Deleting an existing record
c = ClassName.objects.get(id=1)
c.delete()

ClassName.objects.all().delete()


Other helpful methods

Displaying records
ClassName.objects.get(id=1).__dict__ - shows all the values of a single record as a dictionary
ClassName.objects.all().values() - shows all the values of a QuerySet (i.e. multiple instances)


Ordering records
ClassName.objects.all().order_by("field_name") - orders by field provided, ascending
ClassName.objects.all().order_by("-field_name") - orders by field provided, descending





You've probably noticed in the shell that printing whole objects just results in something like <Movie Object (1)>, 
which is not particularly helpful. To change how our models display, we can override the __str__ method in the class. 
This is pretty handy and shows how we can leverage some of Python's magic methods to make our lives easier.

class Movie(models.Model):
    # fields removed for brevity
    def __str__(self):
        return f"<Movie object: {self.title} ({self.id})>"




Many to Many 

this_book = Book.objects.get(id=4)	# retrieve an instance of a book
this_publisher = Publisher.objects.get(id=2)	# retrieve an instance of a publisher
    
# 2 options that do the same thing:
this_publisher.books.add(this_book)		# add the book to this publisher's list of books
# OR
this_book.publishers.add(this_publisher)	# add the publisher to this book's list of publishers

this_publisher.books.all()	# get all the books this publisher is publishing
this_book.publishers.all()	# get all the publishers for this book

this_book = Book.objects.get(id=4)	# retrieve an instance of a book
this_publisher = Publisher.objects.get(id=2)	# retrieve an instance of a publisher
    
# 2 options that do the same thing:
this_publisher.books.remove(this_book)		# remove the book from this publisher's list of books
# OR
this_book.publishers.remove(this_publisher)	# remove the publisher from this book's list of publishers



